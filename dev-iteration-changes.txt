Step1: Initial spring boot application


Step2: Added Blog Controller with mock data in memory

		Test: http://localhost:8090/api/v1/blogs
		
		Json Response
		[
		{
		blogId: 1,
		title: "Blog-title1",
		createDt: "2020-06-19T16:07:41.324",
		author: "author-Blog-title1",
		content: "content-Blog-title1"
		},
		{
		blogId: 2,
		title: "Blog-title2",
		createDt: "2020-06-19T16:07:41.325",
		author: "author-Blog-title2",
		content: "content-Blog-title2"
		},
		{
		blogId: 3,
		title: "Blog-title3",
		createDt: "2020-06-19T16:07:41.325",
		author: "author-Blog-title3",
		content: "content-Blog-title3"
		}
		]
		
		Create 
		  {
        "blogId": 4,
        "title": "Blog-title4",
        "createDt": "2019-06-19T16:07:41.324",
        "author": "author-Blog-title4",
        "content": "content-Blog-title4"
    	  }
   
   
 Step3: Added global exception handling
 When trying to add the same blog again
 
 Expect below error returned
 Got Error while processing request java.lang.Exception: Blog with id 5 already present!
 
 
 Step4: Dockerize the application 
 Run below to create docker image
 
 Create Image:
 docker build -f sbrest1.simple.DockerFile -t sbrest1:v1 .
 
 Run Container:
 d run -d --rm --name sbrest1-app -p8090:8090 sbrest1:v1
 
 Verify:
 d logs -f sbrest1-app
 
 Step5: Deploy in kubernates cluster [docker for mac]
 assumtion: kubenates cluster is already config & kubectl is downloaded
 
 
 Step5a:Kubernates Configuration
 
 create deployment:
  ================================================================
 kubectl create deployment sbrest1-kapp --image=sbrest1:v1
 
 Step5b:
 
 crate service for above deployment for a static ip/service name
 ================================================================
 kubectl create service nodeport sbrest1-kapp --tcp=32000:8090
 
 
 Step5c:
 
 Monitoring & Managring
 
 Watch deployment via command line - 
 ===================================
 watch kubectl get all
 
 
 Step5d:
 Launch kubernates dashboard
 
 start proxy:
 ============ 
 kubectl proxy
 
 genrate token:
 =============
 kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')

 Access dashboard
 
 http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
 
 
 Verify Availability
 ====================
 Delete a pod & see how kubernates launches the pod again
 
 kubectl get pods 
 
 -get pod id for next command 
 kubectl delete pod sbrest1-kapp-7cdc5f4c79-rxl4k

   
 notice - original pod is terminated & a new pod is launched 
 
NAME                                READY   STATUS        RESTARTS   AGE
pod/sbrest1-kapp-7cdc5f4c79-lpzhp   1/1     Running       0          5s
pod/sbrest1-kapp-7cdc5f4c79-rxl4k   0/1     Terminating   0          15m
 
 
NAME                                READY   STATUS    RESTARTS   AGE
pod/sbrest1-kapp-7cdc5f4c79-lpzhp   1/1     Running   0          16s 
  